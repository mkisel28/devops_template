#!/bin/bash

# ===========================================
# –ë–ò–ë–õ–ò–û–¢–ï–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò
# ===========================================

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
load_config() {
    local config_file="/app/config/backup.env"
    
    if [ -f "$config_file" ]; then
        # –≠–∫—Å–ø–æ—Ä—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        set -a
        source "$config_file"
        set +a
        log_debug "üìÑ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑: $config_file"
    else
        log_error "‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: $config_file"
        log_info "üí° –°–∫–æ–ø–∏—Ä—É–π—Ç–µ backup.env.example –≤ backup.env –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    validate_config
}

# –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
validate_config() {
    local errors=0
    
    log_debug "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    if [ -z "${PROJECT_NAME:-}" ]; then
        log_error "‚ùå PROJECT_NAME –Ω–µ –∑–∞–¥–∞–Ω"
        errors=$((errors + 1))
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if [ "${DB_ENABLED:-false}" = "true" ]; then
        check_required_var "DB_HOST" "$errors"
        check_required_var "DB_NAME" "$errors"
        check_required_var "DB_USER" "$errors"
        check_required_var "DB_PASSWORD" "$errors"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
    if [ "${REMOTE_ENABLED:-false}" = "true" ]; then
        check_required_var "REMOTE_HOST" "$errors"
        check_required_var "REMOTE_USER" "$errors"
        check_required_var "REMOTE_PATH" "$errors"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ SSH –∫–ª—é—á–∞
        if [ -n "${REMOTE_SSH_KEY:-}" ] && [ ! -f "${REMOTE_SSH_KEY}" ]; then
            log_error "‚ùå SSH –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω: ${REMOTE_SSH_KEY}"
            errors=$((errors + 1))
        fi
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Telegram
    if [ "${TELEGRAM_ENABLED:-false}" = "true" ]; then
        check_required_var "TELEGRAM_BOT_TOKEN" "$errors"
        check_required_var "TELEGRAM_CHAT_ID" "$errors"
    fi
    
    if [ $errors -gt 0 ]; then
        log_error "‚ùå –ù–∞–π–¥–µ–Ω–æ $errors –æ—à–∏–±–æ–∫ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
        exit 1
    fi
    
    log_success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
check_required_var() {
    local var_name="$1"
    local errors="$2"
    
    if [ -z "${!var_name:-}" ]; then
        log_error "‚ùå –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ –∑–∞–¥–∞–Ω–∞: $var_name"
        return 1
    fi
    return 0
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –∑–Ω–∞—á–µ–Ω–∏–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
get_config() {
    local key="$1"
    local default_value="$2"
    echo "${!key:-$default_value}"
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ volumes –¥–ª—è –±–µ–∫–∞–ø–∞
get_volumes_list() {
    echo "${VOLUMES_LIST:-}" | tr ',' '\n' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//' | grep -v '^$'
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∂–∞—Ç–∏—è
get_compression_cmd() {
    if [ "${COMPRESSION_ENABLED:-false}" = "true" ]; then
        local level="${COMPRESSION_LEVEL:-6}"
        echo "gzip -${level}"
    else
        echo "cat"
    fi
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –±–µ–∫–∞–ø–∞
get_backup_extension() {
    if [ "${COMPRESSION_ENABLED:-false}" = "true" ]; then
        echo ".tar.gz"
    else
        echo ".tar"
    fi
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –±–µ–∫–∞–ø–∞
generate_backup_filename() {
    local type="$1"  # db, volume, full
    local component="$2"  # –∏–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ volume
    local timestamp=$(date '+%Y%m%d_%H%M%S')
    local extension=$(get_backup_extension)
    
    echo "${PROJECT_NAME}_${type}_${component}_${timestamp}${extension}"
}

# –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
show_config() {
    log_info "üìã –¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:"
    echo "  üì¶ –ü—Ä–æ–µ–∫—Ç: ${PROJECT_NAME:-–Ω–µ –∑–∞–¥–∞–Ω–æ}"
    echo "  üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${PROJECT_DESCRIPTION:-–Ω–µ –∑–∞–¥–∞–Ω–æ}"
    echo "  üíæ –ë–µ–∫–∞–ø volumes: ${VOLUMES_ENABLED:-false}"
    echo "  üóÑÔ∏è  –ë–µ–∫–∞–ø –ë–î: ${DB_ENABLED:-false}"
    echo "  üåê –£–¥–∞–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä: ${REMOTE_ENABLED:-false}"
    echo "  üì± Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${TELEGRAM_ENABLED:-false}"
    echo "  üóúÔ∏è  –°–∂–∞—Ç–∏–µ: ${COMPRESSION_ENABLED:-false}"
    echo "  üîí –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ: ${ENCRYPTION_ENABLED:-false}"
    echo "  üîç –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: ${DRY_RUN:-false}"
    
    if [ "${VOLUMES_ENABLED:-false}" = "true" ]; then
        echo "  üìÇ Volumes –¥–ª—è –±–µ–∫–∞–ø–∞:"
        get_volumes_list | while read -r volume; do
            [ -n "$volume" ] && echo "    - $volume"
        done
    fi
    
    if [ "${DB_ENABLED:-false}" = "true" ]; then
        echo "  üóÑÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:"
        echo "    - –¢–∏–ø: ${DB_TYPE:-postgresql}"
        echo "    - –•–æ—Å—Ç: ${DB_HOST:-–Ω–µ –∑–∞–¥–∞–Ω–æ}"
        echo "    - –ë–∞–∑–∞: ${DB_NAME:-–Ω–µ –∑–∞–¥–∞–Ω–æ}"
        echo "    - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${DB_USER:-–Ω–µ –∑–∞–¥–∞–Ω–æ}"
    fi
    
    if [ "${REMOTE_ENABLED:-false}" = "true" ]; then
        echo "  üåê –£–¥–∞–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä:"
        echo "    - –•–æ—Å—Ç: ${REMOTE_HOST:-–Ω–µ –∑–∞–¥–∞–Ω–æ}"
        echo "    - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${REMOTE_USER:-–Ω–µ –∑–∞–¥–∞–Ω–æ}"
        echo "    - –ü—É—Ç—å: ${REMOTE_PATH:-–Ω–µ –∑–∞–¥–∞–Ω–æ}"
    fi
}
