#!/bin/bash

# ===========================================
# –ë–ò–ë–õ–ò–û–¢–ï–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø
# ===========================================

# –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

# –£—Ä–æ–≤–Ω–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
LOG_LEVEL_DEBUG=0
LOG_LEVEL_INFO=1
LOG_LEVEL_WARN=2
LOG_LEVEL_ERROR=3

# –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é INFO)
CURRENT_LOG_LEVEL=${LOG_LEVEL_INFO}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
init_logger() {
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤
    mkdir -p "$(dirname "${LOG_FILE:-/app/logs/backup.log}")"
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    case "${LOG_LEVEL:-INFO}" in
        "DEBUG") CURRENT_LOG_LEVEL=$LOG_LEVEL_DEBUG ;;
        "INFO")  CURRENT_LOG_LEVEL=$LOG_LEVEL_INFO ;;
        "WARN")  CURRENT_LOG_LEVEL=$LOG_LEVEL_WARN ;;
        "ERROR") CURRENT_LOG_LEVEL=$LOG_LEVEL_ERROR ;;
    esac
    
    log_info "üìã –õ–æ–≥–≥–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –£—Ä–æ–≤–µ–Ω—å: ${LOG_LEVEL:-INFO}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –ª–æ–≥–∞ —Å timestamp
_log() {
    local level="$1"
    local color="$2"
    local level_num="$3"
    local message="$4"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    if [ "$level_num" -lt "$CURRENT_LOG_LEVEL" ]; then
        return 0
    fi
    
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    local log_line="[$timestamp] [$level] $message"
    
    # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å —Å —Ü–≤–µ—Ç–æ–º
    echo -e "${color}${log_line}${NC}"
    
    # –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª (–µ—Å–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω)
    if [ -n "${LOG_FILE:-}" ]; then
        echo "$log_line" >> "$LOG_FILE"
        
        # –†–æ—Ç–∞—Ü–∏—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω —Ä–∞–∑–º–µ—Ä
        if [ -f "$LOG_FILE" ] && [ -n "${MAX_LOG_SIZE:-}" ]; then
            local max_size_bytes=$(echo "${MAX_LOG_SIZE}" | sed 's/M/*1024*1024/g' | sed 's/K/*1024/g' | bc 2>/dev/null || echo "10485760")
            local current_size=$(stat -f%z "$LOG_FILE" 2>/dev/null || stat -c%s "$LOG_FILE" 2>/dev/null || echo "0")
            
            if [ "$current_size" -gt "$max_size_bytes" ]; then
                mv "$LOG_FILE" "${LOG_FILE}.old"
                echo "[$timestamp] [INFO] üîÑ –†–æ—Ç–∞—Ü–∏—è –ª–æ–≥-—Ñ–∞–π–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞" > "$LOG_FILE"
            fi
        fi
    fi
}

# –§—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π
log_debug() {
    _log "DEBUG" "$CYAN" "$LOG_LEVEL_DEBUG" "$1"
}

log_info() {
    _log "INFO" "$GREEN" "$LOG_LEVEL_INFO" "$1"
}

log_warn() {
    _log "WARN" "$YELLOW" "$LOG_LEVEL_WARN" "$1"
}

log_error() {
    _log "ERROR" "$RED" "$LOG_LEVEL_ERROR" "$1"
}

log_success() {
    _log "SUCCESS" "$GREEN" "$LOG_LEVEL_INFO" "‚úÖ $1"
}

log_step() {
    _log "STEP" "$BLUE" "$LOG_LEVEL_INFO" "üîÑ $1"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
log_command() {
    local cmd="$1"
    local description="$2"
    
    log_debug "üñ•Ô∏è  –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: $cmd"
    
    if [ "${DRY_RUN:-false}" = "true" ]; then
        log_info "üîç [DRY-RUN] $description"
        log_debug "üîç [DRY-RUN] –ö–æ–º–∞–Ω–¥–∞: $cmd"
        return 0
    fi
    
    log_step "$description"
    
    if eval "$cmd"; then
        log_success "$description - –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
        return 0
    else
        local exit_code=$?
        log_error "$description - –æ—à–∏–±–∫–∞ (–∫–æ–¥: $exit_code)"
        return $exit_code
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
show_progress() {
    local current="$1"
    local total="$2"
    local operation="$3"
    
    local percent=$((current * 100 / total))
    local progress_bar=""
    local filled=$((percent / 2))
    
    for i in $(seq 1 50); do
        if [ $i -le $filled ]; then
            progress_bar="${progress_bar}‚ñà"
        else
            progress_bar="${progress_bar}‚ñë"
        fi
    done
    
    printf "\r${BLUE}[%s] %s %d%% (%d/%d)${NC}" "$progress_bar" "$operation" "$percent" "$current" "$total"
    
    if [ "$current" -eq "$total" ]; then
        echo ""
        log_success "$operation –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
    fi
}
