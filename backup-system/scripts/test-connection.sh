#!/bin/bash

# ===========================================
# –°–ö–†–ò–ü–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–û–ï–î–ò–ù–ï–ù–ò–ô
# ===========================================

set -euo pipefail

# –ó–∞–≥—Ä—É–∑–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫
source /app/scripts/lib/logger.sh
source /app/scripts/lib/config.sh
source /app/scripts/lib/telegram.sh

# –§–ª–∞–≥ –æ–±—â–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
OVERALL_SUCCESS=true

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
test_database_connection() {
    if [ "${DB_ENABLED:-false}" != "true" ]; then
        log_info "üóÑÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ë–î –ø—Ä–æ–ø—É—â–µ–Ω–æ (–æ—Ç–∫–ª—é—á–µ–Ω–æ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)"
        return 0
    fi
    
    log_step "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö..."
    
    local test_result=""
    local connection_string=""
    
    case "${DB_TYPE:-postgresql}" in
        "postgresql")
            connection_string="postgresql://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}"
            
            if [ "${DRY_RUN:-false}" = "true" ]; then
                log_info "üîç [DRY-RUN] –¢–µ—Å—Ç PostgreSQL: $DB_HOST:$DB_PORT"
                test_result="success (dry-run)"
            else
                local start_time=$(date +%s)
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                if docker exec -e PGPASSWORD="$DB_PASSWORD" "$DB_HOST" psql -U "$DB_USER" -d "$DB_NAME" -c "SELECT 1;" >/dev/null 2>&1; then
                    local end_time=$(date +%s)
                    local duration=$((end_time - start_time))
                    test_result="success (${duration}s)"
                    log_success "PostgreSQL —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ"
                else
                    test_result="failed (authentication error)"
                    log_error "‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ PostgreSQL"
                    OVERALL_SUCCESS=false
                fi
         
            fi
            ;;
        *)
            log_error "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${DB_TYPE}"
            test_result="failed (unsupported database type)"
            OVERALL_SUCCESS=false
            ;;
    esac
    
    log_info "üóÑÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ${DB_TYPE}: ${test_result}"
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
    notify_connection_test \
        "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ${DB_TYPE} (${DB_HOST}:${DB_PORT})" \
        "$(echo "$test_result" | cut -d' ' -f1)" \
        "$test_result"
}

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º
test_remote_connection() {
    if [ "${REMOTE_ENABLED:-false}" != "true" ]; then
        log_info "üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–æ–ø—É—â–µ–Ω–æ (–æ—Ç–∫–ª—é—á–µ–Ω–æ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)"
        return 0
    fi
    
    log_step "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º..."
    
    local test_result=""
    local ssh_opts="-o ConnectTimeout=30 -o BatchMode=yes -o StrictHostKeyChecking=no"
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ SSH –∫–ª—é—á–∞ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
    if [ -n "${REMOTE_SSH_KEY:-}" ]; then
        ssh_opts="$ssh_opts -i $REMOTE_SSH_KEY"
    fi
    
    if [ "${DRY_RUN:-false}" = "true" ]; then
        log_info "üîç [DRY-RUN] –¢–µ—Å—Ç SSH: ${REMOTE_USER}@${REMOTE_HOST}:${REMOTE_PORT}"
        test_result="success (dry-run)"
    else
        local start_time=$(date +%s)
        
        # –¢–µ—Å—Ç SSH —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        if timeout 30 ssh $ssh_opts -p "${REMOTE_PORT:-22}" "${REMOTE_USER}@${REMOTE_HOST}" "echo 'SSH connection test'" >/dev/null 2>&1; then
            
            # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            if ssh $ssh_opts -p "${REMOTE_PORT:-22}" "${REMOTE_USER}@${REMOTE_HOST}" "mkdir -p '$REMOTE_PATH' && test -w '$REMOTE_PATH'" >/dev/null 2>&1; then
                
                # –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞
                if ssh $ssh_opts -p "${REMOTE_PORT:-22}" "${REMOTE_USER}@${REMOTE_HOST}" "echo 'test' > '$REMOTE_PATH/.backup_test' && rm -f '$REMOTE_PATH/.backup_test'" >/dev/null 2>&1; then
                    local end_time=$(date +%s)
                    local duration=$((end_time - start_time))
                    test_result="success (${duration}s)"
                    log_success "SSH —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –ø—Ä–∞–≤–∞ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ"
                else
                    test_result="failed (write permission denied)"
                    log_error "‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∑–∞–ø–∏—Å–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: $REMOTE_PATH"
                    OVERALL_SUCCESS=false
                fi
            else
                test_result="failed (directory access denied)"
                log_error "‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å/–ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: $REMOTE_PATH"
                OVERALL_SUCCESS=false
            fi
        else
            test_result="failed (ssh connection timeout)"
            log_error "‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –ø–æ SSH –∫ $REMOTE_HOST"
            OVERALL_SUCCESS=false
        fi
    fi
    
    log_info "üåê –£–¥–∞–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä: ${test_result}"
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
    notify_connection_test \
        "SSH ${REMOTE_USER}@${REMOTE_HOST}:${REMOTE_PORT}" \
        "$(echo "$test_result" | cut -d' ' -f1)" \
        "$test_result"
}

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Docker volumes
test_docker_volumes() {
    if [ "${VOLUMES_ENABLED:-false}" != "true" ]; then
        log_info "üìÇ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Docker volumes –ø—Ä–æ–ø—É—â–µ–Ω–æ (–æ—Ç–∫–ª—é—á–µ–Ω–æ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)"
        return 0
    fi
    
    log_step "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Docker volumes..."
    
    local volumes_list
    volumes_list=$(get_volumes_list)
    
    if [ -z "$volumes_list" ]; then
        log_warn "‚ö†Ô∏è  –°–ø–∏—Å–æ–∫ volumes –¥–ª—è –±–µ–∫–∞–ø–∞ –ø—É—Å—Ç"
        return 0
    fi
    
    local total_volumes=0
    local accessible_volumes=0
    
    while IFS= read -r volume; do
        [ -z "$volume" ] && continue
        total_volumes=$((total_volumes + 1))
        
        log_debug "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ volume: $volume"
        
        if [ "${DRY_RUN:-false}" = "true" ]; then
            log_info "üîç [DRY-RUN] –ü—Ä–æ–≤–µ—Ä–∫–∞ volume: $volume"
            accessible_volumes=$((accessible_volumes + 1))
        else
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è volume
            if docker volume inspect "$volume" >/dev/null 2>&1; then
                log_success "Volume '$volume' –¥–æ—Å—Ç—É–ø–µ–Ω"
                accessible_volumes=$((accessible_volumes + 1))
            else
                log_error "‚ùå Volume '$volume' –Ω–µ –Ω–∞–π–¥–µ–Ω"
                OVERALL_SUCCESS=false
            fi
        fi
    done <<< "$volumes_list"
    
    log_info "üìÇ Docker volumes: $accessible_volumes/$total_volumes –¥–æ—Å—Ç—É–ø–Ω–æ"
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
    notify_connection_test \
        "Docker Volumes ($total_volumes —à—Ç.)" \
        "$([ $accessible_volumes -eq $total_volumes ] && echo "success" || echo "failed")" \
        "$accessible_volumes –∏–∑ $total_volumes volumes –¥–æ—Å—Ç—É–ø–Ω–æ"
}

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
test_telegram() {
    if [ "${TELEGRAM_ENABLED:-false}" != "true" ]; then
        log_info "üì± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram –ø—Ä–æ–ø—É—â–µ–Ω–æ (–æ—Ç–∫–ª—é—á–µ–Ω–æ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)"
        return 0
    fi
    
    log_step "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π..."
    
    if [ "${DRY_RUN:-false}" = "true" ]; then
        log_info "üîç [DRY-RUN] –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è"
        log_info "üì± Telegram: success (dry-run)"
    else
        if send_test_message; then
            log_success "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram"
            log_info "üì± Telegram: success"
        else
            log_error "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"
            log_info "üì± Telegram: failed"
            OVERALL_SUCCESS=false
        fi
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    log_info "üîå –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞: $PROJECT_NAME"
    
    if [ "${DRY_RUN:-false}" = "true" ]; then
        log_info "üîç –†–µ–∂–∏–º DRY-RUN –∞–∫—Ç–∏–≤–µ–Ω - —Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è"
    fi
    
    echo
    log_info "üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π:"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    
    # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
    test_database_connection
    echo
    test_remote_connection
    echo
    test_docker_volumes
    echo
    test_telegram
    
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if [ "$OVERALL_SUCCESS" = "true" ]; then
        log_success "–í—Å–µ —Ç–µ—Å—Ç—ã —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! ‚úÖ"
        exit 0
    else
        log_error "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏! ‚ùå"
        log_info "üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ —Å–µ—Ç–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
        exit 1
    fi
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@"
