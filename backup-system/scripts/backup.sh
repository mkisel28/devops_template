#!/bin/bash

# ===========================================
# –û–°–ù–û–í–ù–û–ô –°–ö–†–ò–ü–¢ –ë–ï–ö–ê–ü–ê
# ===========================================

set -euo pipefail

# –ó–∞–≥—Ä—É–∑–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫
source /app/scripts/lib/logger.sh
source /app/scripts/lib/config.sh
source /app/scripts/lib/telegram.sh

init_logger
load_config

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
BACKUP_START_TIME=$(date +%s)
BACKUP_TEMP_DIR="/backup/temp/$(date +%Y%m%d_%H%M%S)"
BACKUP_ARCHIVE_DIR="/backup/archives"
BACKUP_FILES_CREATED=()
BACKUP_TOTAL_SIZE=0

# –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
cleanup_on_exit() {
    local exit_code=$?
    
    if [ -d "$BACKUP_TEMP_DIR" ]; then
        log_debug "üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: $BACKUP_TEMP_DIR"
        rm -rf "$BACKUP_TEMP_DIR" 2>/dev/null || true
    fi
    
    if [ $exit_code -ne 0 ]; then
        local duration=$(($(date +%s) - BACKUP_START_TIME))
        local duration_formatted=$(format_duration $duration)
        
        notify_backup_error \
            "${PROJECT_NAME:-unknown}" \
            "$(get_backup_type_description)" \
            "–ü—Ä–æ—Ü–µ—Å—Å –±–µ–∫–∞–ø–∞ –ø—Ä–µ—Ä–≤–∞–Ω —Å –∫–æ–¥–æ–º $exit_code" \
            "$duration_formatted"
    fi
    
    exit $exit_code
}

trap cleanup_on_exit EXIT

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
format_duration() {
    local duration=$1
    local hours=$((duration / 3600))
    local minutes=$(((duration % 3600) / 60))
    local seconds=$((duration % 60))
    
    if [ $hours -gt 0 ]; then
        echo "${hours}—á ${minutes}–º ${seconds}—Å"
    elif [ $minutes -gt 0 ]; then
        echo "${minutes}–º ${seconds}—Å"
    else
        echo "${seconds}—Å"
    fi
}

# –ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∏–ø–∞ –±–µ–∫–∞–ø–∞
get_backup_type_description() {
    local types=()
    
    [ "${BACKUP_DATABASE:-false}" = "true" ] && types+=("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
    [ "${BACKUP_VOLUMES:-false}" = "true" ] && types+=("Volumes")
    
    if [ ${#types[@]} -eq 0 ]; then
        echo "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"
    else
        local IFS=", "
        echo "${types[*]}"
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –±–µ–∫–∞–ø–∞
prepare_backup_directories() {
    log_step "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –±–µ–∫–∞–ø–∞..."
    
    mkdir -p "$BACKUP_TEMP_DIR"
    mkdir -p "$BACKUP_ARCHIVE_DIR"
    
    log_debug "üìÅ –í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $BACKUP_TEMP_DIR"
    log_debug "üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∞—Ä—Ö–∏–≤–æ–≤: $BACKUP_ARCHIVE_DIR"
}

# –ë–µ–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL
backup_database() {
    if [ "${DB_ENABLED:-false}" != "true" ] || [ "${BACKUP_DATABASE:-false}" != "true" ]; then
        log_debug "üóÑÔ∏è  –ë–µ–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–ø—É—â–µ–Ω"
        return 0
    fi
    
    log_step "–°–æ–∑–¥–∞–Ω–∏–µ –±–µ–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL..."
    
    local db_backup_file="$BACKUP_TEMP_DIR/$(generate_backup_filename "db" "$DB_NAME")"
    local compression_cmd=$(get_compression_cmd)
    
    if [ "${DRY_RUN:-false}" = "true" ]; then
        log_info "üîç [DRY-RUN] –ë–µ–∫–∞–ø –ë–î: $DB_NAME -> $db_backup_file"
        # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        touch "$db_backup_file"
    else
        log_debug "üóÑÔ∏è  –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫: $DB_HOST:$DB_PORT/$DB_NAME"
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –±–µ–∫–∞–ø–∞ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä PostgreSQL
        log_debug "üê≥ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ PostgreSQL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–µ–∫–∞–ø–∞..."
        
        if docker exec -e PGPASSWORD="$DB_PASSWORD" "$DB_HOST" pg_dump \
            -U "$DB_USER" \
            -d "$DB_NAME" \
            --verbose \
            --format=plain \
            --encoding=UTF8 \
            --no-owner \
            --no-privileges \
            --clean \
            --if-exists | $compression_cmd > "$db_backup_file"; then
            
            log_success "–ë–µ–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω: $(basename "$db_backup_file")"
        else
            log_error "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–µ–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
            return 1
        fi
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
    if [ -f "$db_backup_file" ]; then
        local file_size=$(stat -f%z "$db_backup_file" 2>/dev/null || stat -c%s "$db_backup_file" 2>/dev/null || echo "0")
        local file_size_mb=$((file_size / 1024 / 1024))
        
        if [ $file_size -gt 0 ]; then
            BACKUP_FILES_CREATED+=("$db_backup_file")
            BACKUP_TOTAL_SIZE=$((BACKUP_TOTAL_SIZE + file_size))
            log_info "üìè –†–∞–∑–º–µ—Ä –±–µ–∫–∞–ø–∞ –ë–î: ${file_size_mb} MB"
        else
            log_error "‚ùå –°–æ–∑–¥–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –±–µ–∫–∞–ø–∞ –ë–î –ø—É—Å—Ç"
        fi
    fi
}

# –ë–µ–∫–∞–ø Docker volumes
backup_volumes() {
    if [ "${VOLUMES_ENABLED:-false}" != "true" ] || [ "${BACKUP_VOLUMES:-false}" != "true" ]; then
        log_debug "üìÇ –ë–µ–∫–∞–ø volumes –ø—Ä–æ–ø—É—â–µ–Ω"
        return 0
    fi
    
    local volumes_list
    volumes_list=$(get_volumes_list)
    
    if [ -z "$volumes_list" ]; then
        log_warn "‚ö†Ô∏è  –°–ø–∏—Å–æ–∫ volumes –¥–ª—è –±–µ–∫–∞–ø–∞ –ø—É—Å—Ç"
        return 0
    fi
    
    log_step "–°–æ–∑–¥–∞–Ω–∏–µ –±–µ–∫–∞–ø–∞ Docker volumes..."
    
    local volume_count=0
    local total_volumes
    total_volumes=$(echo "$volumes_list" | wc -l)
    
    while IFS= read -r volume; do
        [ -z "$volume" ] && continue
        volume_count=$((volume_count + 1))
        
        show_progress $volume_count $total_volumes "–ë–µ–∫–∞–ø volume '$volume'"
        
        local volume_backup_file="$BACKUP_TEMP_DIR/$(generate_backup_filename "volume" "$volume")"
        local compression_cmd=$(get_compression_cmd)
        
        if [ "${DRY_RUN:-false}" = "true" ]; then
            log_debug "üîç [DRY-RUN] –ë–µ–∫–∞–ø volume: $volume -> $volume_backup_file"
            # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            touch "$volume_backup_file"
        else
            log_debug "üìÇ –°–æ–∑–¥–∞–Ω–∏–µ –±–µ–∫–∞–ø–∞ volume: $volume"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ volume —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω
            local volume_path="/backup-volumes/$volume"
            if [ ! -d "$volume_path" ]; then
                log_error "‚ùå Volume '$volume' –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: $volume_path"
                return 1
            fi
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ volume
            if cd "$volume_path" && tar czf "$volume_backup_file" . 2>/dev/null; then
                log_debug "‚úÖ Volume '$volume' —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω"
            else
                log_error "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–µ–∫–∞–ø–∞ volume: $volume"
                return 1
            fi
        fi
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
        if [ -f "$volume_backup_file" ]; then
            local file_size=$(stat -f%z "$volume_backup_file" 2>/dev/null || stat -c%s "$volume_backup_file" 2>/dev/null || echo "0")
            local file_size_mb=$((file_size / 1024 / 1024))
            
            if [ $file_size -gt 0 ]; then
                BACKUP_FILES_CREATED+=("$volume_backup_file")
                BACKUP_TOTAL_SIZE=$((BACKUP_TOTAL_SIZE + file_size))
                log_debug "üìè –†–∞–∑–º–µ—Ä –±–µ–∫–∞–ø–∞ volume '$volume': ${file_size_mb} MB"
            else
                log_warn "‚ö†Ô∏è  –§–∞–π–ª –±–µ–∫–∞–ø–∞ volume '$volume' –ø—É—Å—Ç"
            fi
        fi
    done <<< "$volumes_list"
    
    log_success "–ë–µ–∫–∞–ø –≤—Å–µ—Ö volumes –∑–∞–≤–µ—Ä—à–µ–Ω"
}

# –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –±–µ–∫–∞–ø–æ–≤
archive_backups() {
    if [ ${#BACKUP_FILES_CREATED[@]} -eq 0 ]; then
        log_warn "‚ö†Ô∏è  –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è"
        return 0
    fi
    
    log_step "–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –±–µ–∫–∞–ø–æ–≤..."
    
    local archive_name="${PROJECT_NAME}_full_$(date +%Y%m%d_%H%M%S).tar.gz"
    local archive_path="$BACKUP_ARCHIVE_DIR/$archive_name"
    
    if [ "${DRY_RUN:-false}" = "true" ]; then
        log_info "üîç [DRY-RUN] –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞: $archive_name"
    else
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –∞—Ä—Ö–∏–≤–∞
        cd "$BACKUP_TEMP_DIR"
        if tar -czf "$archive_path" .; then
            log_success "–ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω: $archive_name"
        else
            log_error "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞"
            return 1
        fi
    fi
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    BACKUP_FILES_CREATED=("$archive_path")
}

# –û—Ç–ø—Ä–∞–≤–∫–∞ –±–µ–∫–∞–ø–æ–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
upload_to_remote() {
    if [ "${REMOTE_ENABLED:-false}" != "true" ]; then
        log_debug "üåê –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –æ—Ç–∫–ª—é—á–µ–Ω–∞"
        return 0
    fi
    
    if [ ${#BACKUP_FILES_CREATED[@]} -eq 0 ]; then
        log_warn "‚ö†Ô∏è  –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"
        return 0
    fi
    
    log_step "–û—Ç–ø—Ä–∞–≤–∫–∞ –±–µ–∫–∞–ø–æ–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä..."
    
    local ssh_opts="-o ConnectTimeout=30 -o BatchMode=yes -o StrictHostKeyChecking=no"
    if [ -n "${REMOTE_SSH_KEY:-}" ]; then
        ssh_opts="$ssh_opts -i $REMOTE_SSH_KEY"
    fi
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ
    local remote_project_dir="$REMOTE_PATH/$PROJECT_NAME"
    local remote_daily_dir="$remote_project_dir/$(date +%Y-%m-%d)"
    
    if [ "${DRY_RUN:-false}" = "true" ]; then
        log_info "üîç [DRY-RUN] –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ ${REMOTE_USER}@${REMOTE_HOST}:$remote_daily_dir"
    else
        log_debug "üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ: $remote_daily_dir"
        ssh $ssh_opts -p "${REMOTE_PORT:-22}" "${REMOTE_USER}@${REMOTE_HOST}" \
            "mkdir -p '$remote_daily_dir'"
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
        for backup_file in "${BACKUP_FILES_CREATED[@]}"; do
            if [ -f "$backup_file" ]; then
                local filename=$(basename "$backup_file")
                log_debug "üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞: $filename"
                
                if rsync -avz --progress -e "ssh $ssh_opts -p ${REMOTE_PORT:-22}" \
                    "$backup_file" "${REMOTE_USER}@${REMOTE_HOST}:$remote_daily_dir/"; then
                    log_success "–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: $filename"
                else
                    log_error "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: $filename"
                    return 1
                fi
            fi
        done
    fi
    
    log_success "–í—Å–µ –±–µ–∫–∞–ø—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä"
}

# –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–∫–∞–ª—å–Ω—ã—Ö –±–µ–∫–∞–ø–æ–≤
cleanup_local_backups() {
    log_step "–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–∫–∞–ª—å–Ω—ã—Ö –±–µ–∫–∞–ø–æ–≤..."
    
    local retention_days="${RETENTION_DAYS:-30}"
    
    if [ "${DRY_RUN:-false}" = "true" ]; then
        log_info "üîç [DRY-RUN] –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å—Ç–∞—Ä—à–µ $retention_days –¥–Ω–µ–π –≤ $BACKUP_ARCHIVE_DIR"
    else
        local removed_count=0
        local removed_size=0
        
        # –ü–æ–∏—Å–∫ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤
        if [ -d "$BACKUP_ARCHIVE_DIR" ]; then
            while IFS= read -r -d '' file; do
                local file_size=$(stat -f%z "$file" 2>/dev/null || stat -c%s "$file" 2>/dev/null || echo "0")
                removed_count=$((removed_count + 1))
                removed_size=$((removed_size + file_size))
                rm -f "$file"
                log_debug "üóëÔ∏è  –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –±–µ–∫–∞–ø: $(basename "$file")"
            done < <(find "$BACKUP_ARCHIVE_DIR" -name "${PROJECT_NAME}_*" -type f -mtime +$retention_days -print0 2>/dev/null)
        fi
        
        if [ $removed_count -gt 0 ]; then
            local removed_size_mb=$((removed_size / 1024 / 1024))
            log_success "–£–¥–∞–ª–µ–Ω–æ $removed_count —Å—Ç–∞—Ä—ã—Ö –±–µ–∫–∞–ø–æ–≤ (${removed_size_mb} MB)"
        else
            log_info "–°—Ç–∞—Ä—ã—Ö –±–µ–∫–∞–ø–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        fi
    fi
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
process_arguments() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            --dry-run)
                DRY_RUN=true
                log_info "üîç –í–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º DRY-RUN"
                ;;
            --volumes-only)
                BACKUP_DATABASE=false
                BACKUP_VOLUMES=true
                log_info "üìÇ –†–µ–∂–∏–º: —Ç–æ–ª—å–∫–æ volumes"
                ;;
            --database-only)
                BACKUP_DATABASE=true
                BACKUP_VOLUMES=false
                log_info "üóÑÔ∏è  –†–µ–∂–∏–º: —Ç–æ–ª—å–∫–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö"
                ;;
            --no-remote)
                REMOTE_ENABLED=false
                log_info "üåê –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –æ—Ç–∫–ª—é—á–µ–Ω–∞"
                ;;
            *)
                log_error "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç: $1"
                exit 1
                ;;
        esac
        shift
    done
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    log_info "üíæ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –±–µ–∫–∞–ø–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞: $PROJECT_NAME"
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    process_arguments "$@"
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    show_config
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ
    notify_backup_start "$PROJECT_NAME" "$(get_backup_type_description)"
    
    echo
    log_info "üöÄ –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –±–µ–∫–∞–ø–∞..."
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–∞–ø–æ–≤ –±–µ–∫–∞–ø–∞
    prepare_backup_directories
    backup_database
    backup_volumes
    archive_backups
    upload_to_remote
    cleanup_local_backups
    
    # –ü–æ–¥—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤
    local end_time=$(date +%s)
    local duration=$((end_time - BACKUP_START_TIME))
    local duration_formatted=$(format_duration $duration)
    local total_size_mb=$((BACKUP_TOTAL_SIZE / 1024 / 1024))
    
    echo
    log_success "–ë–µ–∫–∞–ø –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
    log_info "‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: $duration_formatted"
    log_info "üìè –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: ${total_size_mb} MB"
    log_info "üìÅ –§–∞–π–ª–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: ${#BACKUP_FILES_CREATED[@]}"
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
    notify_backup_success \
        "$PROJECT_NAME" \
        "$(get_backup_type_description)" \
        "$duration_formatted" \
        "${total_size_mb} MB" \
        "${#BACKUP_FILES_CREATED[@]}"
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@"
